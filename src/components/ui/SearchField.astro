---
import '@pagefind/default-ui/css/ui.css'

export interface Props {
	readonly id?: string
	readonly className?: string
	readonly query?: string
	readonly uiOptions?: Record<string, any>
}

const { id = 'mySearch', className, query, uiOptions = {} } = Astro.props
const bundlePath = `${import.meta.env.BASE_URL}pagefind/`

uiOptions.showImages = false
uiOptions.pageSize = 3
uiOptions.excerptLength = 15
---

<div
	id={id}
	class:list={[className, 'pagefind-init']}
	data-pagefind-ui
	data-bundle-path={bundlePath}
	data-query={query}
	data-ui-options={JSON.stringify(uiOptions)}
>
</div>

<script>
	//@ts-ignore
	import { PagefindUI } from '@pagefind/default-ui'

	function initPageFind() {
		const allSelector = '[data-pagefind-ui]'
		for (const el of document.querySelectorAll(`${allSelector}.pagefind-init`)) {
			const elSelector = [
				...(el.id ? [`#${el.id}`] : []),
				...[...el.classList.values()].map((c) => `.${c}`),
				allSelector
			].join('')
			const bundlePath = el.getAttribute('data-bundle-path')
			const opts = JSON.parse(el.getAttribute('data-ui-options') ?? '{}')
			new PagefindUI({
				...opts,
				element: elSelector,
				bundlePath
			})
			el.classList.remove('pagefind-init')
			const query = el.getAttribute('data-query')
			if (query) {
				const input = el.querySelector<HTMLInputElement>(`input[type="text"]`)
				if (input) {
					input.value = query
					input.dispatchEvent(new Event('input', { bubbles: true }))
				}
			}
		}
	}

	document.addEventListener('astro:page-load', initPageFind)
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initPageFind)
	} else {
		initPageFind()
	}
</script>

<style is:global>
	/* :root {
		--pagefind-ui-primary: #eeeeee;
		--pagefind-ui-text: #eeeeee;
		--pagefind-ui-background: #152028;
		--pagefind-ui-border: #152028;
		--pagefind-ui-tag: #152028;
	} */
	/* #mySearch div.pagefind-ui {
		@apply px-10 !text-red-200;
	}

	#mySearch {
		@apply bg-primary-50;
	}

	#mySearch li {
		@apply text-4xl;
	} */

	.pagefind-ui__drawer.svelte-e9gkc3 {
		/* @apply !absolute z-[9999] h-fit max-h-[calc(100vh-20rem)] w-full overflow-y-auto bg-primary-50; */
		@apply !absolute z-[9999] h-fit max-h-[calc(100vh-10rem)] w-full overflow-y-auto bg-white shadow-lg;
	}

	.pagefind-ui.svelte-e9gkc3 {
		@apply !relative w-full;
	}

	.pagefind-ui__message.svelte-e9gkc3 {
		@apply px-2;
	}

	li.pagefind-ui__result.svelte-j9e30 {
		/* @apply px-10 !text-5xl; */
		@apply !px-5 !pb-4 !pt-2;
	}

	.pagefind-ui__result-title.svelte-j9e30 {
		@apply !text-xl;
	}

	.pagefind-ui__result-excerpt.svelte-j9e30 {
		@apply !text-sm;
	}

	.pagefind-ui__button.svelte-e9gkc3 {
		@apply mx-auto my-0 w-full border-none !text-gray-800 hover:border-green-100;
	}
	/* .pagefind-ui__results-area.svelte-e9gkc3 {
		@apply flex flex-col;
	} */

	.pagefind-ui__result {
		position: relative;
	}

	.pagefind-ui__result-link::after {
		position: absolute;
		inset: 0;
		content: '';
	}

	#mySearch {
		flex-shrink: 1;
	}
</style>
